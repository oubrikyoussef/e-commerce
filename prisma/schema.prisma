datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model User {
    id             String    @id @default(auto()) @map("_id") @db.ObjectId
    name           String?
    email          String    @unique
    emailVerified  Boolean?
    hashedPassword String?
    image          String?
    createdAt      DateTime  @default(now())
    updatedAt      DateTime  @updatedAt
    role           Role      @default(USER)
    Account        Account[]
    orders         Order[]
    reviews        Review[]
}

model Order {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    userId          String         @db.ObjectId
    amount          Float
    currency        String
    status          PaymentStatus
    deliveryStatus  DeliveryStatus
    createdAt       DateTime       @default(now()) // Standardized naming
    paymentIntentId String         @unique
    address         Address?
    user            User           @relation(fields: [userId], references: [id], onDelete: Cascade)
    cart_products   CartProduct[]
}

enum DeliveryStatus {
    delivered
    dispatched
    pending
}

enum PaymentStatus {
    complete
    pending
}

type CartProduct {
    name             String
    description      String
    price            Float
    brand            String
    category         String
    selectedImage    ProductImage
    selectedQuantity Int
    productId        String       @db.ObjectId
}

type ProductImage {
    color     String
    colorCode String
    imageUrl  String
}

type Address {
    city        String
    country     String
    line1       String
    line2       String?
    postal_code String
    state       String
}

enum Role {
    USER
    ADMIN
}

model Product {
    id          String         @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    price       Float
    brand       String
    category    String
    quantity    Int
    maxQuantity Int
    minQuantity Int
    images      ProductImage[]
    reviews     Review[]
}

model Review {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @db.ObjectId
    productId String   @db.ObjectId
    rating    Int
    comment   String
    createdAt DateTime @default(now())
    Product   Product  @relation(fields: [productId], references: [id])
    user      User     @relation(fields: [userId], references: [id])
}
